# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports = [ ];

  boot.initrd.availableKernelModules = [ "tun" "tap" "e1000" "ata_piix" "ohci_pci" "ehci_pci" "ahci" "sd_mod" "sr_mod" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ ];
  boot.extraModulePackages = [ ];

  boot = {
    initrd = {
      secrets = {
        "/etc/nixos/authorized_keys" = "/etc/nixos/authorized_keys";
        "/etc/nixos/host_key" = "/etc/nixos/host_key";
        "/etc/nixos/public_key.pem" = "/etc/nixos/public_key.pem";
        "/etc/nixos/airvpn.ovpn" = "/etc/nixos/airvpn.ovpn";
      }; 

      network = {
        flushBeforeStage2 = false;
         ssh = {
           enable = true;
           port = 2222;
           authorizedKeyFiles = [ "/etc/nixos/authorized_keys" ];
           hostKeys = [ "/etc/nixos/host_key" ];
         };
      };

      systemd = {
        enable = true;

        initrdBin = [ pkgs.openvpn pkgs.libuuid pkgs.gnugrep pkgs.cryptsetup pkgs.openssl pkgs.curl pkgs.iproute2 pkgs.gnused ];

        contents = {
           "/etc/ssl/certs/ca-certificates.crt".source = builtins.toFile "ca-certificates.crt" (builtins.readFile "/etc/ssl/certs/ca-certificates.crt");
           "/etc/ssl/certs/ca-bundle.crt".source = builtins.toFile "ca-bundle.crt" (builtins.readFile "/etc/ssl/certs/ca-bundle.crt");
           "/etc/nixos/CustomDecrypt.sh".source = "${/etc/nixos/CustomDecrypt.sh}";
        };

        network = {
          enable = true;
          networks = {
            enp0s3 = {
              enable = true;
              name = "enp0s3";
              address = [ "192.168.4.152/24" ];
              gateway = [ "192.168.4.1" ];
              #dns = [ "8.8.8.8" ];
            };
          };
        };
   
        services = {
		
          Openvpn = {
            enable = true;
            wants = [ "network.target" "initrd-nixos-copy-secrets.service" ];
            after = [ "network.target" "initrd-nixos-copy-secrets.service" ];
            before = [ "CustomDecrypt.service" ];
            wantedBy = [ "CustomDecrypt.service" ];
            unitConfig = { Description = "OpenVPN"; DefaultDependencies = false; };
            serviceConfig = {
              Type = "forking";
              ExecStart = "${pkgs.bash}/bin/sh -c 'openvpn --daemon --config /etc/nixos/airvpn.ovpn'";
            };
          };
		  
          CustomDecrypt = {
            enable = true;
            wants = [ "initrd-nixos-copy-secrets.service" ];
            after = [ "initrd-nixos-copy-secrets.service" ];
            before = [ "systemd-ask-password-console.service" ];
            wantedBy = [ "systemd-ask-password-console.service" ];
            unitConfig = { Description = "CustomDecrypt"; DefaultDependencies = false; };
            serviceConfig = {
              Type = "forking";
              ExecStart="${pkgs.bash}/bin/sh -c 'sh /etc/nixos/CustomDecrypt.sh \"https://ntfy.sh/8hr3h4ufoh384y3f0p4h3\" \"/etc/nixos/public_key.pem\" &'";
              TimeoutStopSec = "3700s";
            };
          };
		  
          CustomWatchdog = {
            enable = true;
            after = [ "timer.target" ];
            requiredBy = [ "initrd.target" ];
            unitConfig = { Description = "CustomWatchdog"; DefaultDependencies = false; };
            serviceConfig = {
              Type = "forking";
              ExecStart="${pkgs.bash}/bin/sh -c 'sleep 3600 && reboot -f &'";
              TimeoutStopSec = "3700s";
            };
          };  
		  
        };
      };
    };
  };

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/372731b0-e1cb-48ea-978d-168434d411db";
      fsType = "ext4";
    };

  boot.initrd.luks.devices."luks-09e07e7e-fbcc-4717-97cb-765de780467b".device = "/dev/disk/by-uuid/09e07e7e-fbcc-4717-97cb-765de780467b";

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/2837-AEC8";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/467a7bc9-9e09-4a27-abdc-d06dcf5262c3"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp0s3.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  virtualisation.virtualbox.guest.enable = true;
}
